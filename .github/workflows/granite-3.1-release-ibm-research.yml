name: granite-3.1-tagged-release
run-name: "[RELEASE] Granite 3.1 - CI/CD quantized GGUF models [${{github.ref_type}}: ${{github.ref_name}}]"

# Full matrix:
# repo_id: "[
#   'ibm-granite/granite-3.1-2b-instruct',
#   'ibm-granite/granite-3.1-8b-instruct',
#   'ibm-granite/granite-3.1-3b-a800m-instruct',
#   'ibm-granite/granite-3.1-1b-a400m-instruct',
#   'ibm-granite/granite-guardian-3.1-2b',
#   'ibm-granite/granite-guardian-3.1-8b'
# ]"
# quantization: "[
#   'Q2_K',
#   'Q3_K_L', 'Q3_K_M', 'Q3_K_S',
#   'Q4_0', 'Q4_1', 'Q4_K_M', 'Q4_K_S',
#   'Q5_0', 'Q5_1', 'Q5_K_M', 'Q5_K_S',
#   'Q6_K',
#   'Q8_0'
# ]"
on:
  push:
    # branches:
    #   - 'release/granite-3.1'
    tags:
      - "v3.1*"
  workflow_dispatch:

permissions:
 contents: read
 packages: read

env:
  DEBUG: true
  SOURCE_INSTRUCT_REPOS: "[
      'ibm-granite/granite-3.1-2b-instruct',
      'ibm-granite/granite-3.1-8b-instruct',
      'ibm-granite/granite-3.1-1b-a400m-instruct',
      'ibm-granite/granite-3.1-3b-a800m-instruct',
      'ibm-granite/granite-guardian-3.1-2b',
      'ibm-granite/granite-guardian-3.1-8b'
    ]"
  TARGET_INSTRUCT_QUANTIZATIONS: "[
      'Q2_K',
      'Q3_K_L', 'Q3_K_M', 'Q3_K_S',
      'Q4_0', 'Q4_1', 'Q4_K_M', 'Q4_K_S',
      'Q5_0', 'Q5_1', 'Q5_K_M', 'Q5_K_S',
      'Q6_K',
      'Q8_0'
    ]"
  TARGET_REPO_NAME_EXT: -GGUF
  TARGET_REPO_OWNER: ibm-research
  TARGET_REPO_PRIVATE: false
  COLLECTION_CONFIG: "resources/json/latest/hf_collection_mapping_gguf.json"

jobs:
  environment-setup:
    runs-on: ubuntu-latest
    # Note: declaration of these outputs is essential to pass to the next job
    outputs:
      hf_collection_config: ${{ steps.set-vars.outputs.hf_collection_config }}
      target_repo_owner: ${{ steps.set-vars.outputs.target_repo_owner }}
      target_repo_name_ext: ${{ steps.set-vars.outputs.target_repo_name_ext }}
      source_instruct_repos: "${{ steps.set-vars.outputs.source_instruct_repos }}"
      target_instruct_quantizations: "${{ steps.set-vars.outputs.target_instruct_quantizations }}"
      target_repo_private: ${{ steps.set-vars.outputs.target_repo_private }}
    steps:
      - name: Set environment variables in GitHub output
        id: set-vars
        run: |
            echo "DEBUG: $DEBUG"
            echo "COLLECTION_CONFIG: $COLLECTION_CONFIG"
            echo "TARGET_REPO_OWNER: $TARGET_REPO_OWNER"
            echo "TARGET_REPO_NAME_EXT: $TARGET_REPO_NAME_EXT"
            echo "debug=$DEBUG" >> "$GITHUB_OUTPUT"
            echo "hf_collection_config=$COLLECTION_CONFIG" >> "$GITHUB_OUTPUT"
            echo "target_repo_owner=$TARGET_REPO_OWNER" >> "$GITHUB_OUTPUT"
            echo "target_repo_name_ext=$TARGET_REPO_NAME_EXT" >> "$GITHUB_OUTPUT"
            echo "source_instruct_repos=$SOURCE_INSTRUCT_REPOS" >> "$GITHUB_OUTPUT"
            echo "target_instruct_quantizations=$TARGET_INSTRUCT_QUANTIZATIONS" >> "$GITHUB_OUTPUT"
            echo "target_repo_private=$TARGET_REPO_PRIVATE" >> "$GITHUB_OUTPUT"
      - name: Confirm GitHub output values were set
        run: |
            echo "debug: ${{ steps.set-vars.outputs.debug }}"
            echo "hf_collection_config: '${{ steps.set-vars.outputs.hf_collection_config }}'"
            echo "target_repo_owner: '${{ steps.set-vars.outputs.target_repo_owner }}'"
            echo "target_repo_name_ext: '${{ steps.set-vars.outputs.target_repo_name_ext }}'"
            echo "source_instruct_repos: '${{ steps.set-vars.outputs.source_instruct_repos }}'"
            echo "target_instruct_quantizations: '${{ steps.set-vars.outputs.target_instruct_quantizations }}'"
            echo "target_repo_private: '${{ steps.set-vars.outputs.target_repo_private }}'"

      # - name: Dump runner context
      #   env:
      #     RUNNER_CONTEXT: ${{ toJson(runner) }}
      #   run: echo "$RUNNER_CONTEXT"

      # - name: Dump GitHub context
      #   env:
      #     GH_CONTEXT: ${{ toJson(github) }}
      #   run: echo "$GH_CONTEXT"

      # - name: confirm-environment
      #   run: |
      #     uname -a
      #     echo "runner.os: ${{ runner.os }}"
      #     echo "runner.arch: ${{ runner.arch }}"
      #     echo "env.TARGET_REPO_OWNER: ${{env.TARGET_REPO_OWNER}}"
      #     echo "env.TARGET_REPO_NAME_EXT: ${{env.TARGET_REPO_NAME_EXT}}"
      #     echo "env.COLLECTION_CONFIG: ${{env.COLLECTION_CONFIG}}"

  call-create-hf-repos:
    needs: [ environment-setup ]
    uses: IBM/gguf/.github/workflows/reusable-create-hf-repos.yml@main
    with:
      debug: ${{ needs.environment-setup.outputs.debug == 'true' }}
      hf_collection_config: ${{ needs.environment-setup.outputs.hf_collection_config }}
      target_repo_owner: ${{ needs.environment-setup.outputs.target_repo_owner }}
      target_repo_name_ext: ${{ needs.environment-setup.outputs.target_repo_name_ext }}
      target_repo_private: ${{ needs.environment-setup.outputs.target_repo_private == 'true' }}
    secrets: inherit

  call-convert-hf-to-f16-gguf:
    needs: [ call-create-hf-repos, environment-setup ]
    permissions:
      contents: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        repo_id: ${{ fromJson(needs.environment-setup.outputs.source_instruct_repos) }}
    uses: IBM/gguf/.github/workflows/reusable-convert-hf-to-f16-gguf.yml@main
    with:
      debug: ${{ needs.environment-setup.outputs.debug == 'true' }}
      hf_collection_config: ${{ needs.environment-setup.outputs.hf_collection_config }}
      target_repo_owner: ${{ needs.environment-setup.outputs.target_repo_owner }}
      target_repo_name_ext: ${{ needs.environment-setup.outputs.target_repo_name_ext }}
      repo_id: ${{ matrix.repo_id }}
    secrets: inherit

  call-quantize-upload-gguf:
    needs: [ call-convert-hf-to-f16-gguf, environment-setup ]
    permissions:
      contents: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        repo_id: ${{ fromJson(needs.environment-setup.outputs.source_instruct_repos) }}
        quantization: ${{ fromJson(needs.environment-setup.outputs.target_instruct_quantizations) }}
    uses: IBM/gguf/.github/workflows/reusable-quantize-upload-gguf.yml@main
    with:
      debug: ${{ needs.environment-setup.outputs.debug == 'true' }}
      hf_collection_config: "${{ needs.environment-setup.outputs.hf_collection_config }}"
      target_repo_owner: "${{ needs.environment-setup.outputs.target_repo_owner }}"
      target_repo_name_ext: "${{ needs.environment-setup.outputs.target_repo_name_ext }}"
      repo_id: "${{ matrix.repo_id }}"
      quantization: "${{ matrix.quantization }}"
    secrets: inherit

  call-create-hf-collections:
    needs: [ call-quantize-upload-gguf, environment-setup ]
    uses: IBM/gguf/.github/workflows/reusable-create-hf-collections.yml@main
    with:
      debug: ${{ needs.environment-setup.outputs.debug == 'true' }}
      hf_collection_config: ${{ needs.environment-setup.outputs.hf_collection_config }}
      target_repo_owner: ${{ needs.environment-setup.outputs.target_repo_owner }}
      target_repo_name_ext: ${{ needs.environment-setup.outputs.target_repo_name_ext }}
      target_collection_private: ${{ needs.environment-setup.outputs.target_repo_private == 'true' }}
    secrets: inherit
