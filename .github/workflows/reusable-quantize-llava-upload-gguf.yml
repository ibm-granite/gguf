# This workflow:
# - Downloads the source HF (safetensors) llava model from the Hugging Face hub.
# - Uses HF Transformers to save just the LLM portion of the llava model
# - Convert the LLM model to f16 GGUF
# - Quantizes the f16 GGUF to the designated 'quantization' (e.g., Q4_0, Q4_K_M, etc.) defined in the build matrix.
# - Uploads the quantized GGUF to target 'repo_id'.

name: quantize-llava-llm-upload-gguf-reusable

on:
  workflow_call:
    secrets:
      hf_token:
        required: true
    inputs:
      enable_vision_jobs:
        type: boolean
        required: false
        default: false
      repo_id:
        type: string
        required: true
      quantization:
        type: string
        required: true
      hf_collection_config:
        type: string
        required: true
      target_repo_owner:
        type: string
        required: true
      target_repo_name_ext:
        type: string
        required: true
      debug:
        type: boolean
        required: true
        default: false
      trace:
        type: boolean
        required: false
        default: false

# TODO: F16_OPT_ENABLED
env:
  EXT_GGUF: .gguf
  EXT_NAME_F16: "-f16.gguf"
  F16_FILE_EXISTS: "0"
  F16_OPT_ENABLED: true
  FIND_ARGS: "-not -path '*/.*' -print | sed -e 's;[^/]*/;|___;g;s;___|; |;g'"
  LLAMACPP_DIR: llama.cpp
  MODEL_DOWNLOAD_DIR: models

jobs:
  quantize:
    runs-on: macos-latest
    if: ${{ inputs.enable_vision_jobs == true }}
    env:
      HF_HUB_DISABLE_XET: 1
      HF_HUB_ENABLE_HF_TRANSFER: 0
    steps:
    - uses: actions/checkout@v4

    - run: |
        echo "[INFO] github.env:"
        echo "[INFO] >> run_id: '${{ github.run_id }}'"
        echo "[INFO] >> ref: '${{ github.ref }}', ref_name: '${{ github.ref_name }}', ref_type: '${{ github.ref_type }}'"
        echo "[INFO] >> workflow_ref: '${{ github.workflow_ref }}'"
        echo "[INFO] >> run_id: '${{ github.run_id }}'"
        echo "[INFO] >> event_type: '${{ github.event_type }}'"
        echo "[INFO] >> event.: action: '${{ github.event.action }}'"
        echo "[INFO] >> event.: base_ref: '${{ github.event.base_ref }}'"
        echo "[INFO] >> event.: workflow_run.conclusion: '${{ github.event.workflow_run.conclusion }}'"
        echo "[INFO] >> event.release.: name: '${{ github.event.release.name }}', tag_name: '${{ github.event.release.tag_name }}'"

    - name: confirm-environment
      run: |
        uname -a
        echo "runner.os: ${{ runner.os }}"
        echo "runner.arch: ${{ runner.arch }}"
        echo "github.workspace: ${{ github.workspace }}"
        echo "env.EXT_GGUF: ${{ env.EXT_GGUF }}"
        echo "env.EXT_NAME_F16: ${{ env.EXT_NAME_F16 }}"
        echo "env.F16_OPT_ENABLED: ${{ env.F16_OPT_ENABLED }}"
        echo "env.FIND_ARGS: ${{ env.FIND_ARGS }}"
        echo "env.LLAMACPP_DIR: ${{ env.LLAMACPP_DIR }}"
        echo "env.MODEL_DOWNLOAD_DIR: ${{ env.MODEL_DOWNLOAD_DIR }}"

    # Use this step to set values to the github context (shared across jobs/steps)
    # Note: using $GITHUB_OUTPUT sets values under the current step's namespace
    # whereas using $GITHUB_ENV sets values in the job's underlying environment.
    # Note: for each 'repo_id' we parse out e.g., REPO_ORG=ibm-granite REPO_NAME=granite-3.0-2b-instruct
    - name: set-github-env
      id: set_github_env
      run: |
        echo "REPO_ORG=$(dirname '${{ inputs.repo_id }}')" >> $GITHUB_ENV
        echo "REPO_NAME=$(basename '${{ inputs.repo_id }}')" >> $GITHUB_ENV

    - name: set-derivative-env-vars-1
      run: |
        echo "BASE_FNAME_F16_GGUF=${{ env.REPO_NAME }}${{env.EXT_NAME_F16}}" >> $GITHUB_ENV
        echo "BASE_FNAME_QUANTIZED_GGUF=${{ env.REPO_NAME }}-${{inputs.quantization}}${{env.EXT_GGUF}}" >> $GITHUB_ENV
        echo "LOCAL_MODEL_PATH=${{env.MODEL_DOWNLOAD_DIR}}/${{ inputs.repo_id }}" >> $GITHUB_ENV

    # NOTE: we MUST have the target quant. model (output) in a sep. directory as the source f16 model (input)
    # or streaming will cause a SIGSEV error
    - name: set-derivative-env-vars-2
      run: |
        echo "LOCAL_FNAME_F16_GGUF=${{env.MODEL_DOWNLOAD_DIR}}/${{ inputs.repo_id }}/$BASE_FNAME_F16_GGUF" >> $GITHUB_ENV
        echo "LOCAL_FNAME_QUANTIZED_GGUF=${{env.BASE_FNAME_QUANTIZED_GGUF}}" >> $GITHUB_ENV
        echo "TARGET_REPO_ID=${{inputs.target_repo_owner}}/${{env.REPO_NAME}}${{inputs.target_repo_name_ext}}" >> $GITHUB_ENV

    - name: verify-github-env
      run: |
        echo "================== GITHUB_ENV ====================="
        echo "REPO_ORG=$REPO_ORG"
        echo "REPO_NAME=$REPO_NAME"
        echo "================== Derivative Environment Variables 1 =================="
        echo "BASE_FNAME_F16_GGUF='$BASE_FNAME_F16_GGUF' (${{ env.BASE_FNAME_F16_GGUF }})"
        echo "BASE_FNAME_QUANTIZED_GGUF='$BASE_FNAME_QUANTIZED_GGUF' (${{ env.BASE_FNAME_QUANTIZED_GGUF }})"
        echo "LOCAL_MODEL_PATH='$LOCAL_MODEL_PATH' (${{ env.LOCAL_MODEL_PATH }})"
        echo "================== Derivative Environment Variables 2 =================="
        echo "LOCAL_FNAME_F16_GGUF='$LOCAL_FNAME_F16_GGUF' (${{ env.LOCAL_FNAME_F16_GGUF }})"
        echo "LOCAL_FNAME_QUANTIZED_GGUF='$LOCAL_FNAME_QUANTIZED_GGUF' (${{ env.LOCAL_FNAME_QUANTIZED_GGUF }})"
        echo "TARGET_REPO_ID='$TARGET_REPO_ID' (${{ env.TARGET_REPO_ID }})"

    - name: Dump GitHub inputs
      env:
        GITHUB_INPUTS: ${{ toJson(inputs) }}
      if: ${{ github.event.inputs.debug }}
      run: echo "$GITHUB_INPUTS"

    - name: List all environment variables
      if: ${{ github.event.inputs.debug }}
      run: env | sort

    # Note: at the current time, we cannot use Python versions > 3.11 due to HF and langchain deps.
    # Note: you can verify in a step using: run: python -c "import sys; print(sys.version)"
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: install-general-dependencies
      run: |
        python -m pip install -r ./requirements.txt
        pip list

    - name: test-f16-exists
      run: |
        output=$(python ./scripts/hf_model_file_exists.py ${{ env.TARGET_REPO_ID }} ${{ env.BASE_FNAME_F16_GGUF }} ${{secrets.hf_token}})
        echo "output: '$output'"
        if [[ "$output" == "True" ]]; then
          echo "F16_FILE_EXISTS=1" >> $GITHUB_ENV
        elif [[ "$output" == "False" ]]; then
          echo "F16_FILE_EXISTS=0" >> $GITHUB_ENV
        else
          echo "Unexpected output from Python script: $output"
          exit 2
        fi

    - name: download-f16-gguf-hf-hub-download
      run: |
        echo "Downloading f16 GGUF using hf_file_download..."
        echo "--------------------"
        python ./scripts/hf_file_download.py ${{ env.MODEL_DOWNLOAD_DIR}} ${{ env.TARGET_REPO_ID }} ${{ env.BASE_FNAME_F16_GGUF }} ${{secrets.hf_token}}
        ls -al ${{env.MODEL_DOWNLOAD_DIR}}/${{ env.TARGET_REPO_ID }}/*.gguf
        echo "LOCAL_FNAME_F16_GGUF=${{ env.MODEL_DOWNLOAD_DIR}}/${{ env.TARGET_REPO_ID }}/${{ env.BASE_FNAME_F16_GGUF }}" >> $GITHUB_ENV

    - name: verify-f16-gguf-hf-hub-download
      run: |
        echo downloaded files...
        echo "--------------------"
        find . -name \*.gguf -type f
        echo "--------------------"
        if [ -f ${{env.LOCAL_FNAME_F16_GGUF}} ]; then
          echo "File exists"
        else
          env | sort
          echo "File does not exist. env.LOCAL_FNAME_F16_GGUF=${{env.LOCAL_FNAME_F16_GGUF}}"
          exit 1
        fi

    # for GGUF conversion, we only need a shallow copy (depth=1) and
    # specify only the scripts and requirements files we need (sparse).
    # Note: we include LICENSE for future BOM generation
    - name: shallow-clone-llamacpp
      uses: actions/checkout@v4
      with:
        path: ${{ env.LLAMACPP_DIR }} # checkout under this directory
        repository: 'ggerganov/llama.cpp'
        ref: 'master'  # default to master branch
        fetch-depth: 1
        sparse-checkout-cone-mode: false
        sparse-checkout: |
          convert_hf_to_gguf.py
          convert_lora_to_gguf.py
          requirements/requirements-convert_hf_to_gguf.txt
          requirements/requirements-convert_lora_to_gguf.txt
          requirements/requirements-convert_legacy_llama.txt
          gguf-py
          tools/mtmd/requirements.txt
          tools/mtmd/legacy-models

    - name: print-llamacpp
      if: inputs.debug == true
      run: |
        echo "PATH: '{{$PATH}}'"
        ls -al llama.cpp
        find llama.cpp ${{env.FIND_ARGS}}

    - name: install-llama-cpp-dependencies
      run: |
        python -m pip install -r ./llama.cpp/requirements/requirements-convert_hf_to_gguf.txt
        python -m pip install -r ./llama.cpp/requirements/requirements-convert_lora_to_gguf.txt
        pip uninstall --yes transformers
        pip install transformers==4.49.0
        pip list

    - name: quantize-gguf
      run: |
        echo "--------------------"
        echo "LOCAL_FNAME_F16_GGUF='$LOCAL_FNAME_F16_GGUF' (${{ env.LOCAL_FNAME_F16_GGUF }})"
        echo "LOCAL_FNAME_QUANTIZED_GGUF='$LOCAL_FNAME_QUANTIZED_GGUF' (${{ env.LOCAL_FNAME_QUANTIZED_GGUF }})"
        echo "--------------------"
        sudo ./bin/llama-quantize ${{ env.LOCAL_FNAME_F16_GGUF }} ${{ env.LOCAL_FNAME_QUANTIZED_GGUF }} ${{inputs.quantization}}

    - name: find-gguf-files
      if: inputs.debug == true
      run: |
        find . -name \*.gguf -type f
        ls -al .
        echo "--------------------"

    - name: upload-quantized-gguf-model
      run: |
        echo "TARGET_REPO_ID=${{env.TARGET_REPO_ID}}"
        echo "LOCAL_FNAME_QUANTIZED_GGUF=${{env.LOCAL_FNAME_QUANTIZED_GGUF}}"
        python ./scripts/hf_model_upload.py ${{ env.TARGET_REPO_ID }} ${{ env.LOCAL_FNAME_QUANTIZED_GGUF }} ${{secrets.hf_token}} ${{github.workflow_ref}} ${{github.run_id}}
