name: ollama-publish-granite-3.1
run-name: "Ollama publish [${{github.ref_type}}: ${{github.ref_name}}]"

on:
  push:
    tags:
      - "test-ollama-3.1*"
  workflow_dispatch:

permissions:
 contents: read
 packages: read

env:
  DEBUG: true
  TRACE: false
  ENABLE_LANGUAGE_JOBS: true
  ENABLE_VISION_JOBS: false
  ENABLE_GUARDIAN_JOBS: true
  ENABLE_EMBEDDING_JOBS: false
  ENABLE_OLLAMA_PUSH: true

  # 'mrutkows/granite-3.1-2b-base',
  # 'mrutkows/granite-3.1-8b-base',
  # 'mrutkows/granite-3.1-1b-a400m-base',
  # 'mrutkows/granite-3.1-3b-a800m-base',
  # 'mrutkows/granite-3.1-2b-instruct',
  # 'mrutkows/granite-3.1-8b-instruct',
  # 'mrutkows/granite-3.1-1b-a400m-instruct',
  # 'mrutkows/granite-3.1-3b-a800m-instruct'
  SOURCE_INSTRUCT_REPOS: "[
    'mrutkows/granite-3.1-2b-base',
    'mrutkows/granite-3.1-8b-base',
    'mrutkows/granite-3.1-1b-a400m-base',
    'mrutkows/granite-3.1-3b-a800m-base',
    'mrutkows/granite-3.1-2b-instruct',
    'mrutkows/granite-3.1-8b-instruct',
    'mrutkows/granite-3.1-1b-a400m-instruct',
    'mrutkows/granite-3.1-3b-a800m-instruct'
  ]"
  # 'Q2_K',
  # 'Q3_K_L', 'Q3_K_M', 'Q3_K_S',
  # 'Q4_0', 'Q4_1', 'Q4_K_M', 'Q4_K_S',
  # 'Q5_0', 'Q5_1', 'Q5_K_M', 'Q5_K_S',
  # 'Q6_K',
  # 'Q8_0'
  TARGET_INSTRUCT_QUANTIZATIONS: "[
    'Q2_K',
    'Q3_K_L', 'Q3_K_M', 'Q3_K_S',
    'Q4_0', 'Q4_1', 'Q4_K_M', 'Q4_K_S',
    'Q5_0', 'Q5_1', 'Q5_K_M', 'Q5_K_S',
    'Q6_K',
    'Q8_0'
  ]"
  # 'ibm-granite/granite-guardian-3.1-2b',
  # 'ibm-granite/granite-guardian-3.1-8b'
  SOURCE_GUARDIAN_REPOS: "[
    'mrutkows/granite-guardian-3.1-2b',
    'mrutkows/granite-guardian-3.1-8b'
  ]"
  # 'Q4_K_M',
  # 'Q5_K_M',
  # 'Q6_K',
  # 'Q8_0'
  TARGET_GUARDIAN_QUANTIZATIONS: "[
    'Q4_K_M',
    'Q5_K_M',
    'Q6_K',
    'Q8_0'
  ]"
  SOURCE_VISION_REPOS: "[
    'None'
  ]"
  TARGET_VISION_QUANTIZATIONS: "[
    'None'
  ]"
  # TODO: Sparse arch. not supp. by llama.cpp: 'ibm-granite/granite-embedding-30m-sparse',
  SOURCE_EMBEDDING_REPOS: "[
    'None'
  ]"
  TARGET_EMBEDDING_QUANTIZATIONS: "[
    'None'
  ]"
  TARGET_HF_REPO_NAME_EXT: -GGUF
  TARGET_HF_REPO_OWNER: mrutkows
  TARGET_HF_REPO_PRIVATE: false
  COLLECTION_CONFIG: "resources/json/latest/hf_collection_mapping_gguf.json"
  # ibm | mrutkows
  TARGET_OLLAMA_ORG: ibm

jobs:
  # ===========================================================================
  # Environment setup
  # ===========================================================================
  environment-setup:
    runs-on: ubuntu-latest
    # Note: declaration of these outputs is essential to pass to the next job
    outputs:
      debug: ${{ steps.set-vars.outputs.debug }}
      trace: ${{ steps.set-vars.outputs.trace }}
      enable_language_jobs: ${{ steps.set-vars.outputs.enable_language_jobs }}
      enable_vision_jobs: ${{ steps.set-vars.outputs.enable_vision_jobs }}
      enable_guardian_jobs: ${{ steps.set-vars.outputs.enable_guardian_jobs }}
      enable_embedding_jobs: ${{ steps.set-vars.outputs.enable_embedding_jobs }}
      hf_collection_config: ${{ steps.set-vars.outputs.hf_collection_config }}
      target_repo_private: ${{ steps.set-vars.outputs.target_repo_private }}
      target_repo_owner: ${{ steps.set-vars.outputs.target_repo_owner }}
      target_repo_name_ext: ${{ steps.set-vars.outputs.target_repo_name_ext }}
      source_instruct_repos: "${{ steps.set-vars.outputs.source_instruct_repos }}"
      target_instruct_quantizations: "${{ steps.set-vars.outputs.target_instruct_quantizations }}"
      source_vision_repos: "${{ steps.set-vars.outputs.source_vision_repos }}"
      target_vision_quantizations: "${{ steps.set-vars.outputs.target_vision_quantizations }}"
      source_guardian_repos: "${{ steps.set-vars.outputs.source_guardian_repos }}"
      target_guardian_quantizations: "${{ steps.set-vars.outputs.target_guardian_quantizations }}"
      source_embedding_repos: "${{ steps.set-vars.outputs.source_embedding_repos }}"
      target_embedding_quantizations: "${{ steps.set-vars.outputs.target_embedding_quantizations }}"
      enable_ollama_push: ${{ steps.set-vars.outputs.enable_ollama_push }}
      target_ollama_org: ${{ steps.set-vars.outputs.target_ollama_org }}
      target_ollama_llm_quants: "${{ steps.set-vars.outputs.target_ollama_llm_quants }}"
      target_ollama_guardian_quants: "${{ steps.set-vars.outputs.target_ollama_guardian_quants }}"
      target_ollama_embedding_quants: "${{ steps.set-vars.outputs.target_ollama_embedding_quants }}"
      target_ollama_vision_quants: "${{ steps.set-vars.outputs.target_ollama_vision_quants }}"
    env:
      ARRAY_SEP: "','"
      QUANT_F16: "f16"
    steps:
      - name: List all environment variables
        id: list-env-vars
        run: env | sort

      - name: Append f16 to Ollama llm quants
        id: ollama-append-llm-quants
        run: |
          echo "Appending to TARGET_INSTRUCT_QUANTIZATIONS: '${{ fromJSON(env.TARGET_INSTRUCT_QUANTIZATIONS) }}'"
          TEMP_ARRAY_STRING="${{ join(fromJSON(env.TARGET_INSTRUCT_QUANTIZATIONS), env.ARRAY_SEP) }}"
          echo "TEMP_ARRAY_STRING=$TEMP_ARRAY_STRING"
          TARGET_OLLAMA_LLM_QUANTS="['${TEMP_ARRAY_STRING}${{env.ARRAY_SEP}}${{env.QUANT_F16}}']"
          echo "TARGET_OLLAMA_LLM_QUANTS=$TARGET_OLLAMA_LLM_QUANTS" >> $GITHUB_ENV

      - name: Append f16 to Ollama guardian quants
        id: ollama-append-guardian-quants
        run: |
          echo "Appending to TARGET_GUARDIAN_QUANTIZATIONS: '${{ fromJSON(env.TARGET_GUARDIAN_QUANTIZATIONS) }}'"
          TEMP_ARRAY_STRING="${{ join(fromJSON(env.TARGET_GUARDIAN_QUANTIZATIONS), env.ARRAY_SEP) }}"
          echo "TEMP_ARRAY_STRING=$TEMP_ARRAY_STRING"
          TARGET_OLLAMA_GUARDIAN_QUANTS="['${TEMP_ARRAY_STRING}${{env.ARRAY_SEP}}${{env.QUANT_F16}}']"
          echo "TARGET_OLLAMA_GUARDIAN_QUANTS=$TARGET_OLLAMA_GUARDIAN_QUANTS" >> $GITHUB_ENV

      - name: Append f16 to Ollama embedding quants
        id: ollama-append-embedding-quants
        run: |
          echo "Appending to TARGET_EMBEDDING_QUANTIZATIONS: '${{ fromJSON(env.TARGET_EMBEDDING_QUANTIZATIONS) }}'"
          TEMP_ARRAY_STRING="${{ join(fromJSON(env.TARGET_EMBEDDING_QUANTIZATIONS), env.ARRAY_SEP) }}"
          echo "TEMP_ARRAY_STRING=$TEMP_ARRAY_STRING"
          TARGET_OLLAMA_EMBEDDING_QUANTS="['${TEMP_ARRAY_STRING}${{env.ARRAY_SEP}}${{env.QUANT_F16}}']"
          echo "TARGET_OLLAMA_EMBEDDING_QUANTS=$TARGET_OLLAMA_EMBEDDING_QUANTS" >> $GITHUB_ENV

      - name: Append f16 to Ollama vision quants
        id: ollama-append-vision-quants
        run: |
          echo "Appending to TARGET_VISION_QUANTIZATIONS: '${{ fromJSON(env.TARGET_VISION_QUANTIZATIONS) }}'"
          TEMP_ARRAY_STRING="${{ join(fromJSON(env.TARGET_VISION_QUANTIZATIONS), env.ARRAY_SEP) }}"
          echo "TEMP_ARRAY_STRING=$TEMP_ARRAY_STRING"
          TARGET_OLLAMA_VISION_QUANTS="['${TEMP_ARRAY_STRING}${{env.ARRAY_SEP}}${{env.QUANT_F16}}']"
          echo "TARGET_OLLAMA_VISION_QUANTS=$TARGET_OLLAMA_VISION_QUANTS" >> $GITHUB_ENV

      - name: Set environment variables in GitHub output
        id: set-vars
        run: |
            echo "DEBUG: $DEBUG"
            echo "TRACE: $TRACE"
            echo "COLLECTION_CONFIG: $COLLECTION_CONFIG"
            echo "TARGET_HF_REPO_OWNER: $TARGET_HF_REPO_OWNER"
            echo "TARGET_HF_REPO_NAME_EXT: $TARGET_HF_REPO_NAME_EXT"
            echo "debug=$DEBUG" >> "$GITHUB_OUTPUT"
            echo "trace=$TRACE" >> "$GITHUB_OUTPUT"
            echo "enable_language_jobs=$ENABLE_LANGUAGE_JOBS" >> "$GITHUB_OUTPUT"
            echo "enable_vision_jobs=$ENABLE_VISION_JOBS" >> "$GITHUB_OUTPUT"
            echo "enable_guardian_jobs=$ENABLE_GUARDIAN_JOBS" >> "$GITHUB_OUTPUT"
            echo "enable_embedding_jobs=$ENABLE_EMBEDDING_JOBS" >> "$GITHUB_OUTPUT"
            echo "hf_collection_config=$COLLECTION_CONFIG" >> "$GITHUB_OUTPUT"
            echo "target_repo_owner=$TARGET_HF_REPO_OWNER" >> "$GITHUB_OUTPUT"
            echo "target_repo_name_ext=$TARGET_HF_REPO_NAME_EXT" >> "$GITHUB_OUTPUT"
            echo "source_instruct_repos=$SOURCE_INSTRUCT_REPOS" >> "$GITHUB_OUTPUT"
            echo "target_instruct_quantizations=$TARGET_INSTRUCT_QUANTIZATIONS" >> "$GITHUB_OUTPUT"
            echo "target_repo_private=$TARGET_HF_REPO_PRIVATE" >> "$GITHUB_OUTPUT"
            echo "source_vision_repos=$SOURCE_VISION_REPOS" >> "$GITHUB_OUTPUT"
            echo "target_vision_quantizations=$TARGET_VISION_QUANTIZATIONS" >> "$GITHUB_OUTPUT"
            echo "source_guardian_repos=$SOURCE_GUARDIAN_REPOS" >> "$GITHUB_OUTPUT"
            echo "target_guardian_quantizations=$TARGET_GUARDIAN_QUANTIZATIONS" >> "$GITHUB_OUTPUT"
            echo "source_embedding_repos=$SOURCE_EMBEDDING_REPOS" >> "$GITHUB_OUTPUT"
            echo "target_embedding_quantizations=$TARGET_EMBEDDING_QUANTIZATIONS" >> "$GITHUB_OUTPUT"
            echo "enable_ollama_push=$ENABLE_OLLAMA_PUSH" >> "$GITHUB_OUTPUT"
            echo "target_ollama_org=$TARGET_OLLAMA_ORG" >> "$GITHUB_OUTPUT"
            echo "target_ollama_llm_quants=$TARGET_OLLAMA_LLM_QUANTS" >> "$GITHUB_OUTPUT"
            echo "target_ollama_guardian_quants=$TARGET_OLLAMA_GUARDIAN_QUANTS" >> "$GITHUB_OUTPUT"
            echo "target_ollama_embedding_quants=$TARGET_OLLAMA_EMBEDDING_QUANTS" >> "$GITHUB_OUTPUT"
            echo "target_ollama_vision_quants=$TARGET_OLLAMA_VISION_QUANTS" >> "$GITHUB_OUTPUT"

      - name: Verify updated environment variables
        id: verify-updated-env-vars
        run: env | sort

      - name: Confirm GitHub output values were set
        run: |
            echo "ollama_debug: ${{ steps.set-vars.outputs.ollama_debug }}"
            echo "debug: ${{ steps.set-vars.outputs.debug }}"
            echo "trace: ${{ steps.set-vars.outputs.trace }}"
            echo "enable_language_jobs: ${{ steps.set-vars.outputs.enable_language_jobs }}"
            echo "enable_vision_jobs: ${{ steps.set-vars.outputs.enable_vision_jobs }}"
            echo "enable_guardian_jobs: ${{ steps.set-vars.outputs.enable_guardian_jobs }}"
            echo "enable_embedding_jobs: ${{ steps.set-vars.outputs.enable_embedding_jobs }}"
            echo "hf_collection_config: '${{ steps.set-vars.outputs.hf_collection_config }}'"
            echo "target_repo_owner: '${{ steps.set-vars.outputs.target_repo_owner }}'"
            echo "target_repo_name_ext: '${{ steps.set-vars.outputs.target_repo_name_ext }}'"
            echo "target_repo_private: '${{ steps.set-vars.outputs.target_repo_private }}'"
            echo "source_instruct_repos: '${{ steps.set-vars.outputs.source_instruct_repos }}'"
            echo "target_instruct_quantizations: '${{ steps.set-vars.outputs.target_instruct_quantizations }}'"
            echo "source_vision_repos: '${{ steps.set-vars.outputs.source_vision_repos }}'"
            echo "target_vision_quantizations: '${{ steps.set-vars.outputs.target_vision_quantizations }}'"
            echo "source_guardian_repos: '${{ steps.set-vars.outputs.source_guardian_repos }}'"
            echo "target_guardian_quantizations: '${{ steps.set-vars.outputs.target_guardian_quantizations }}'"
            echo "source_embedding_repos: '${{ steps.set-vars.outputs.source_embedding_repos }}'"
            echo "target_embedding_quantizations: '${{ steps.set-vars.outputs.target_embedding_quantizations }}'"
            echo "enable_ollama_push: '${{ steps.set-vars.outputs.enable_ollama_push }}'"
            echo "target_ollama_org: '${{ steps.set-vars.outputs.target_ollama_org }}'"
            echo "target_ollama_llm_quants: '${{ steps.set-vars.outputs.target_ollama_llm_quants }}'"
            echo "target_ollama_guardian_quants: '${{ steps.set-vars.outputs.target_ollama_guardian_quants }}'"
            echo "target_ollama_embedding_quants: '${{ steps.set-vars.outputs.target_ollama_embedding_quants }}'"
            echo "target_ollama_vision_quants: '${{ steps.set-vars.outputs.target_ollama_vision_quants }}'"

      # - name: List all environment variables
      #   run: env | sort

      # - name: Dump runner context
      #   env:
      #     RUNNER_CONTEXT: ${{ toJson(runner) }}
      #   run: |
      #     uname -a
      #     echo "$RUNNER_CONTEXT"

  # ===========================================================================
  # Ollama (llm/instruct)
  # ===========================================================================
  ollama-release-llm-models:
    needs: [ environment-setup ]
    uses: ibm-granite/gguf/.github/workflows/reusable-create-push-ollama-model.yml@main
    permissions:
      contents: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        repo_id: ${{ fromJson(needs.environment-setup.outputs.source_instruct_repos) }}
        quantization: ${{ fromJson(needs.environment-setup.outputs.target_ollama_llm_quants) }}
    with:
      debug: ${{ needs.environment-setup.outputs.debug == 'true' }}
      hf_collection_config: ${{ needs.environment-setup.outputs.hf_collection_config }}
      enable_ollama_push: ${{ needs.environment-setup.outputs.enable_ollama_push == 'true' }}
      enable_language_jobs: ${{ needs.environment-setup.outputs.enable_language_jobs == 'true' }}
      target_repo_owner: ${{ needs.environment-setup.outputs.target_repo_owner }}
      target_repo_name_ext: ${{ needs.environment-setup.outputs.target_repo_name_ext }}
      target_ollama_org: ${{ needs.environment-setup.outputs.target_ollama_org }}
      repo_id: ${{ matrix.repo_id }}
      quantization: ${{ matrix.quantization }}
    secrets:
      hf_token: ${{ secrets.HF_TOKEN_IBM_GRANITE }}
      ollama_token: ${{ secrets.OLLAMA_TOKEN_IBM }}

  # ===========================================================================
  # Ollama (guardian)
  # ===========================================================================
  ollama-release-guardian-models:
    needs: [ environment-setup ]
    uses: ibm-granite/gguf/.github/workflows/reusable-create-push-ollama-model.yml@main
    permissions:
      contents: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        repo_id: ${{ fromJson(needs.environment-setup.outputs.source_guardian_repos) }}
        quantization: ${{ fromJson(needs.environment-setup.outputs.target_ollama_guardian_quants) }}
    with:
      debug: ${{ needs.environment-setup.outputs.debug == 'true' }}
      hf_collection_config: ${{ needs.environment-setup.outputs.hf_collection_config }}
      enable_ollama_push: ${{ needs.environment-setup.outputs.enable_ollama_push == 'true' }}
      enable_guardian_jobs: ${{ needs.environment-setup.outputs.enable_guardian_jobs == 'true' }}
      target_repo_owner: ${{ needs.environment-setup.outputs.target_repo_owner }}
      target_repo_name_ext: ${{ needs.environment-setup.outputs.target_repo_name_ext }}
      target_ollama_org: ${{ needs.environment-setup.outputs.target_ollama_org }}
      repo_id: ${{ matrix.repo_id }}
      quantization: ${{ matrix.quantization }}
    secrets:
      hf_token: ${{ secrets.HF_TOKEN_IBM_GRANITE }}
      ollama_token: ${{ secrets.OLLAMA_TOKEN_IBM }}

  # ===========================================================================
  # Ollama (embedding)
  # ===========================================================================
  ollama-release-embedding-models:
    needs: [ environment-setup ]
    uses: ibm-granite/gguf/.github/workflows/reusable-create-push-ollama-model.yml@main
    permissions:
      contents: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        repo_id: ${{ fromJson(needs.environment-setup.outputs.source_embedding_repos) }}
        quantization: ${{ fromJson(needs.environment-setup.outputs.target_ollama_embedding_quants) }}
    with:
      debug: ${{ needs.environment-setup.outputs.debug == 'true' }}
      hf_collection_config: ${{ needs.environment-setup.outputs.hf_collection_config }}
      enable_ollama_push: ${{ needs.environment-setup.outputs.enable_ollama_push == 'true' }}
      enable_embedding_jobs: ${{ needs.environment-setup.outputs.enable_embedding_jobs == 'true' }}
      target_repo_owner: ${{ needs.environment-setup.outputs.target_repo_owner }}
      target_repo_name_ext: ${{ needs.environment-setup.outputs.target_repo_name_ext }}
      target_ollama_org: ${{ needs.environment-setup.outputs.target_ollama_org }}
      repo_id: ${{ matrix.repo_id }}
      quantization: ${{ matrix.quantization }}
    secrets:
      hf_token: ${{ secrets.HF_TOKEN_IBM_GRANITE }}
      ollama_token: ${{ secrets.OLLAMA_TOKEN_IBM }}

  # ===========================================================================
  # Ollama (vision)
  # ===========================================================================
  ollama-release-vision-models:
    needs: [ environment-setup ]
    uses: ibm-granite/gguf/.github/workflows/reusable-create-push-ollama-model.yml@main
    permissions:
      contents: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        repo_id: ${{ fromJson(needs.environment-setup.outputs.source_vision_repos) }}
        quantization: ${{ fromJson(needs.environment-setup.outputs.target_ollama_vision_quants) }}
    with:
      debug: ${{ needs.environment-setup.outputs.debug == 'true' }}
      hf_collection_config: ${{ needs.environment-setup.outputs.hf_collection_config }}
      enable_ollama_push: ${{ needs.environment-setup.outputs.enable_ollama_push == 'true' }}
      enable_embedding_jobs: ${{ needs.environment-setup.outputs.enable_vision_jobs == 'true' }}
      target_repo_owner: ${{ needs.environment-setup.outputs.target_repo_owner }}
      target_repo_name_ext: ${{ needs.environment-setup.outputs.target_repo_name_ext }}
      target_ollama_org: ${{ needs.environment-setup.outputs.target_ollama_org }}
      repo_id: ${{ matrix.repo_id }}
      quantization: ${{ matrix.quantization }}
    secrets:
      hf_token: ${{ secrets.HF_TOKEN_IBM_GRANITE }}
      ollama_token: ${{ secrets.OLLAMA_TOKEN_IBM }}
